// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LondonTransportFareSystem.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace LondonTransportFareSystem.Models
{
    public partial class LondonTransportContext
    {
        private ILondonTransportContextProcedures _procedures;

        public virtual ILondonTransportContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new LondonTransportContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ILondonTransportContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class LondonTransportContextProcedures : ILondonTransportContextProcedures
    {
        private readonly LondonTransportContext _context;

        public LondonTransportContextProcedures(LondonTransportContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetCurrentBalanceResult>> GetCurrentBalanceAsync(Guid? customerID, OutputParameter<decimal?> balance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterbalance = new SqlParameter
            {
                ParameterName = "balance",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = balance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "customerID",
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterbalance,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCurrentBalanceResult>("EXEC @returnValue = [dbo].[GetCurrentBalance] @customerID = @customerID, @balance = @balance OUTPUT", sqlParameters, cancellationToken);

            balance.SetValue(parameterbalance.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TopUpAccountResult>> TopUpAccountAsync(Guid? customerID, decimal? amount, OutputParameter<bool?> success, OutputParameter<decimal?> balance, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersuccess = new SqlParameter
            {
                ParameterName = "success",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = success?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterbalance = new SqlParameter
            {
                ParameterName = "balance",
                Precision = 19,
                Scale = 4,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = balance?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "customerID",
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "amount",
                    Precision = 19,
                    Scale = 4,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parametersuccess,
                parameterbalance,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TopUpAccountResult>("EXEC @returnValue = [dbo].[TopUpAccount] @customerID = @customerID, @amount = @amount, @success = @success OUTPUT, @balance = @balance OUTPUT", sqlParameters, cancellationToken);

            success.SetValue(parametersuccess.Value);
            balance.SetValue(parameterbalance.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateTransactionOnSwipeInResult>> UpdateTransactionOnSwipeInAsync(Guid? customerID, int? modeID, int? stationID, OutputParameter<bool?> isAllowed, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterisAllowed = new SqlParameter
            {
                ParameterName = "isAllowed",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = isAllowed?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "customerID",
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "modeID",
                    Value = modeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stationID",
                    Value = stationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterisAllowed,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateTransactionOnSwipeInResult>("EXEC @returnValue = [dbo].[UpdateTransactionOnSwipeIn] @customerID = @customerID, @modeID = @modeID, @stationID = @stationID, @isAllowed = @isAllowed OUTPUT", sqlParameters, cancellationToken);

            isAllowed.SetValue(parameterisAllowed.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateTransactionOnSwipeOutResult>> UpdateTransactionOnSwipeOutAsync(Guid? customerID, int? modeID, int? stationID, OutputParameter<bool?> success, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersuccess = new SqlParameter
            {
                ParameterName = "success",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = success?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "customerID",
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "modeID",
                    Value = modeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "stationID",
                    Value = stationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersuccess,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateTransactionOnSwipeOutResult>("EXEC @returnValue = [dbo].[UpdateTransactionOnSwipeOut] @customerID = @customerID, @modeID = @modeID, @stationID = @stationID, @success = @success OUTPUT", sqlParameters, cancellationToken);

            success.SetValue(parametersuccess.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
